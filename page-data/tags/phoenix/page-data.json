{"componentChunkName":"component---src-templates-tags-js","path":"/tags/phoenix","webpackCompilationHash":"1685c372fac6696602c2","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"html":"<p>In this blogpost I want to show how to make phoenix use svelte in templates.\nSo lets start:</p>\n<p>Edit your <code>asset/package.json</code> file and add these 3 lines to devDependencies - also remove uglifyjs - we will replace it with terser which is a maintained fork of uglify</p>\n<pre><code>+    \"svelte\": \"^3.12.1\",\n+    \"svelte-loader\": \"^2.13.6\",\n+    \"terser-webpack-plugin\": \"^2.1.1\",\n-    \"uglifyjs-webpack-plugin\": \"^1.2.4\",\n</code></pre>\n<p>Next run <code>npm install</code>\nafter everything is installed we can move to the webpack setup:\nremove uglify, import terser and add the initialization:</p>\n<pre><code>const UglifyJsPlugin = require('uglifyjs-webpack-plugin');\n</code></pre>\n<pre><code>const TerserPlugin = require('terser-webpack-plugin');\n\nmodule.exports = (env, options) => ({\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({ cache: true, parallel: true, sourceMap: false }),\n      new TerserPlugin(),\n      new OptimizeCSSAssetsPlugin({})\n    ]\n  },\n</code></pre>\n<p>Next add a resolve section:</p>\n<pre><code>  entry: {\n    './js/app.js': ['./js/app.js']\n  },\n  resolve: {\n    alias: {\n      svelte: path.resolve('node_modules', 'svelte')\n    },\n    extensions: ['.mjs', '.js', '.svelte'],\n    mainFields: ['svelte', 'browser', 'module', 'main'],\n    modules: ['node_modules']\n  },\n</code></pre>\n<p>Add also these two  - the mjs part is needed because otherwise webpack throws an error that no require function can be used in the browser</p>\n<pre><code>        use: {\n          loader: 'babel-loader'\n        },\n      },\n      {\n        test: /\\.mjs$/,\n        include: /node_modules/,\n        type: \"javascript/auto\",\n      },\n      {\n        test: /\\.(html|svelte)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'svelte-loader',\n          options: {\n            hotReload: true\n          }\n         }\n       }\n     ]\n</code></pre>\n<p>with this setup we can include svelte templates to our views\nIn  <code>/assets/js/app.js</code> add</p>\n<pre><code>import './svelte.js';\n</code></pre>\n<p>In <code>/assets/js/svelte.js</code> with this content:</p>\n<pre><code>import App from './App.svelte'\n\nconst app = new App({\n    target: document.querySelector('.svelte'),\n    props: {\n        name: 'svelte'\n    }\n})\nexport default app\n</code></pre>\n<p>And in  <code>/assets/js/App.svelte</code> add:</p>\n<pre><code>&#x3C;script>\n    export let name;\n&#x3C;/script>\n&#x3C;h1>Phoenix and {name}!&#x3C;/h1>\n</code></pre>\n<p>last thing what we need to do is to add an element where this can be attached to our view:</p>\n<pre><code>&#x3C;div class=\"svelte\">&#x3C;/div>\n</code></pre>\n<p>This should render a h1 tag with the content <code>Phoenix and svelte</code>\nThats the basic setup but what if we want more??</p>\n<p>Lets add a view helper in <code>lib/myapp_web/views/layout_view.ex</code> add these functions:</p>\n<pre><code>  def svelte(name, props) do\n    :div\n    |> tag([data: [props: json(props)], id: generate_id(name)])\n  end\n\n  def json(props) do\n    props\n    |> Jason.encode\n    |> case do\n      {:ok, message} -> message\n      {:error, _} -> \"\"\n    end\n  end\n\n  def generate_id(name) do\n    \"svelte-#{String.replace(name, \" \", \"-\")}-root\"\n  end\n</code></pre>\n<p>this allows us to use a helper in our templates:</p>\n<pre><code>&#x3C;%= svelte \"test\", %{:name => \"svelte\"} %>\n</code></pre>\n<p>we can pass as many params in this map as we want\nthen we need to create a directory <code>assets/js/svelte</code>\nand inside create new files with the same name as the first param passed to the svelte helper:\n<code>assets/js/svelte/test.svelte</code>\nwith normal svelte style templating:</p>\n<pre><code> &#x3C;script>\n    export let name;\n &#x3C;/script>\n \n&#x3C;h1>Phoenix and {name}!&#x3C;/h1>\n</code></pre>\n<p>the last part is to let out app know how to fin these templates:\nFor this to work lets replace the content of <code>assets/js/svelte.js</code> with:</p>\n<pre><code>const context = require.context(\"./svelte\", false, /\\.svelte/);\nwindow.onload = function() {\n  context.keys().forEach((file) => {\n    const componentName = file.replace(/\\.\\/|\\.svelte/g, '');\n    const targetId = `svelte-${componentName}-root`;\n\n    const root = document.getElementById(targetId);\n\n    if(!root){\n      return;\n    }\n\n    const requiredApp = require(`./svelte/${componentName}.svelte`);\n\n    const props = root.getAttribute('data-props');\n    let parsedProps = {};\n    if(props){\n      parsedProps = JSON.parse(props);\n    }\n\n    new requiredApp.default({\n      target: root,\n      props: parsedProps\n    });\n  });\n};\n</code></pre>\n<p>Thats all - diffs of both commits can be found in this <a href=\"https://gist.github.com/dkuku/cf644f87e984d28f359886da5df307b3\">gist</a></p>","id":"e5a80af7-c1df-502f-8eab-dc721afdba0f","frontmatter":{"date":"2019-09-28","path":"/phoenix-svelte-setup","title":"Make phenix use svelte","excerpt":"Make phoenix use svelte","tags":["phoenix","svelte"]}}],"tagName":"phoenix"}}}